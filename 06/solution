#! /usr/bin/env elixir
defmodule SignalProcessor do
    defp all_unique?(list) do
        length(list) == Enum.sort(list) |> Enum.dedup() |> length()
    end

    def start_of_packet_index(input_signal, header_length) do
        {header, tail} = Enum.split(input_signal, header_length)
        start_of_packet_index_loop(header, tail, header_length)
    end

    defp start_of_packet_index_loop(header, [], index) do
        case all_unique?(header) do
             true  -> index
             false -> :not_found
        end
    end
    defp start_of_packet_index_loop(old_header = [_ | new_header], [ symbol | signal ], index) do
        new_header = new_header ++ [symbol]
        case all_unique?(old_header) do
             true  -> index
             false -> start_of_packet_index_loop(new_header, signal, index + 1)
        end
    end
end

{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

# Process as a list is easier
input_content = String.to_charlist(input_content)

IO.inspect(length(input_content), label: "Input Length")
IO.inspect(SignalProcessor.start_of_packet_index(input_content, 4), label: "Part 1")
IO.inspect(SignalProcessor.start_of_packet_index(input_content, 14), label: "Part 2")
#! /usr/bin/env elixir
{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

defmodule Tetris do
    def land_rocks(rocks), do: for {x,y} <- rocks, do: :ets.insert(:chamber, {y, x, :rock})
    def move_rocks(rocks, {dx,dy}, xrange, yrange) do
        rocks = for {x,y} <- rocks, do: {x+dx,y+dy}
        case vacant?(rocks, xrange, yrange) do
            true -> {:ok, rocks}
            false -> :error
        end
    end

    def vacant?(slots, xrange, yrange) do
        Enum.all?(slots, fn {x,y} ->
            x > xrange.first and
            x < xrange.last and
            y < yrange.last and
            not Enum.member?(:ets.lookup(:chamber, y) |> Enum.map(&(elem(&1, 1))), x)
        end)
    end

    def top(rocks) do
        rocks |> Enum.map(&(elem(&1, 1))) |> Enum.min()
    end

    def drop_rock(xrange, yrange, shape, stream, revstream) do
        {xstart, ystart} = elem(shape, 1)

        xstart = xstart + xrange.first + 1
        ystart = ystart + yrange.first

        {:ok, rocks} = move_rocks(elem(shape, 2), {xstart,ystart}, xrange, yrange)

        drop_rock_loop(rocks, stream, revstream, xrange, yrange)
    end

    defp decode_delta(?<), do: {-1,0}
    defp decode_delta(?>), do: {+1,0}

    defp drop_rock_loop(rocks, [], revstream, xrange, yrange) do
        # repeate stream
        drop_rock_loop(rocks, Enum.reverse(revstream), [], xrange, yrange)
    end
    defp drop_rock_loop(rocks, [symbol|stream], revstream, xrange, yrange) do
        delta     = decode_delta(symbol)
        revstream = [symbol|revstream]

        rocks = case move_rocks(rocks, delta, xrange, yrange) do
            {:ok, next} -> next
            :error      -> rocks
        end

        down = {0, +1}
        case move_rocks(rocks, down, xrange, yrange) do
            {:ok, next} ->
                drop_rock_loop(next, stream, revstream, xrange, yrange)
            :error ->
                land_rocks(rocks)
                {rocks, stream, revstream}
        end
    end

    def draw_chamber(xrange, yrange) do
        screen = Enum.map(yrange, fn y ->
            row = :ets.lookup(:chamber, y)
            Enum.map(xrange, fn x ->
                case Enum.find(row, fn {^y, ^x, _} -> true
                                       { _,  _, _} -> false end) do
                    nil ->
                        cond do
                            y == yrange.last and x == xrange.first -> ?+
                            y == yrange.last and x == xrange.last  -> ?+
                            y == yrange.last  -> ?-
                            x == xrange.first -> ?|
                            x == xrange.last  -> ?|
                            true -> ?.
                        end
                    {^y, ^x, :rock} -> ?#
                end
            end) ++ '\n'
        end)
        :io.format(screen)
    end

    def drop_n_rocks(n, n, xrange, yrange, shapes, revshapes, stream, revstream) do
        {xrange, yrange, shapes ++ Enum.reverse(revshapes), stream ++ Enum.reverse(revstream)}
    end
    def drop_n_rocks(n, nmax, xrange, yrange, [], revshapes, stream, revstream) do
        drop_n_rocks(n, nmax, xrange, yrange, Enum.reverse(revshapes), [], stream, revstream)
    end
    def drop_n_rocks(n, nmax, xrange, yrange, shapes, revshapes, [], revstream) do
        drop_n_rocks(n, nmax, xrange, yrange, shapes, revshapes, Enum.reverse(revstream), [])
    end
    def drop_n_rocks(n, nmax, xrange, yrange, [s|shapes], revshapes, stream, revstream) do
        revshapes = [s|revshapes]

        {rocks, stream, revstream} = Tetris.drop_rock(xrange, yrange, s, stream, revstream)
        rocks_top      = Tetris.top(rocks)

        yrange = case rocks_top < yrange.first do
            true  -> rocks_top..yrange.last
            false -> yrange
        end

        # draw_chamber(xrange, yrange)

        yrange = case Range.size(yrange) > 1000000 do
            true ->
                IO.inspect({n, :os.timestamp()}, label: "N")
                Enum.each((yrange.first+100)..yrange.last, fn y -> :ets.delete(:chamber, y) end)
                yrange.first..(yrange.first+100)
            false ->
                yrange
        end

        drop_n_rocks(n+1, nmax, xrange, yrange, shapes, revshapes, stream, revstream)
    end
end

shapes = [
    {:hbar, {2,-4}, [{0,0},{1,0},{2,0},{3,0}]},
    {:plus, {2,-4}, [{1,0},{0,-1},{1,-1},{2,-1},{1,-2}]},
    {:revl, {2,-4}, [{0,0},{1,0},{2,0},{2,-1},{2,-2}]},
    {:vbar, {2,-4}, [{0,0},{0,-1},{0,-2},{0,-3}]},
    {:quad, {2,-4}, [{0,0},{0,-1},{1,0},{1,-1}]},
]

stream = String.to_charlist(input_content)
xrange = 0..8
yrange = -0..+0

:chamber = :ets.new(:chamber, [:bag, :private, :named_table])

# result = Tetris.drop_n_rocks(0, 2, xrange, yrange, shapes, [], stream, [])
# result = Tetris.drop_n_rocks(0, 2022, xrange, yrange, shapes, [], stream, [])
result = Tetris.drop_n_rocks(0, 1000000000000, xrange, yrange, shapes, [], stream, [])

IO.inspect(abs(elem(result, 1).first), label: "Result")

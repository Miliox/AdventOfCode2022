#! /usr/bin/env elixir
{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

defmodule Utils do
    def parse(input) do
        {:ok, regex} = Regex.compile("Valve (\\w+) has flow rate=(\\d+); tunnels? leads? to valves? (\\w+[, \\w+]*)")
        matches = Regex.scan(regex, input)
        Enum.map(matches, fn [_, valve, rate, adjs] ->
            adjs = String.split(adjs, ", ")
            rate = String.to_integer(rate)
            {valve, rate, adjs}
        end)
    end

    def gen_routes(valves) do
        Enum.reduce(valves, %{}, fn {v0,_,_}, map1 ->
            Enum.reduce(valves, map1, fn {v1,_,_}, map2 ->
                {:ok, path} = Utils.find_path(v0, v1, valves)
                Map.put(map2, v0 <> v1, path)
            end)
        end)
    end

    def find_path(src, dst, valves) do
        bfs([[src]], dst, valves, [])
    end
    defp bfs([], _, _, _), do: :error
    defp bfs([path = [dst |_]|    _], dst, _, _), do: {:ok, path}
    defp bfs([path = [node|_]|paths], dst, valves, visited) do
        visited = [node|visited]

        {^node, _, adjs} = Enum.find(valves, fn {v, _, _} ->  v == node end)

        adjs = Enum.reject(adjs, fn a -> Enum.member?(visited, a) end)

        bfs(paths ++ Enum.map(adjs, fn a -> [a|path] end), dst, valves, visited)
    end

    def close_valves(0, _, _, _, rate, total) do
        {rate, total}
    end
    def close_valves(timeout, vcurr, [], routes, rate, total) do
        timeout = timeout - 1
        total = total + rate
        close_valves(timeout, vcurr, [], routes, rate, total)
    end
    def close_valves(timeout, vcurr, [{vnext, vrate, _}|path], routes, rate, total) do
        distance = length(Map.fetch!(routes, vcurr <> vnext) |> IO.inspect()) - 1
        timeout = timeout - distance
        total = total + (rate * distance) + vrate
        rate = rate + vrate
        close_valves(timeout, vnext, path, routes, rate, total)
    end
end

valves = Utils.parse(input_content) |> IO.inspect(label: "Valves")
routes = Utils.gen_routes(valves) |> IO.inspect(label: "Routes")

work_valves = Enum.filter(valves, fn
    {_,0,_} -> false
    {_,_,_} -> true
end) |> Enum.sort(fn {_,r1,_},{_,r2,_} -> r1 > r2 end) |> IO.inspect(label: "Work Valves")

Utils.close_valves(30, "AA", work_valves, routes, 0, 0) |> IO.inspect()
#! /usr/bin/env elixir
{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

route = String.split(input_content, "\n")     |>
        Enum.map(fn s -> String.split(s, " ") |>
        Enum.map(&String.to_charlist/1) end)  |>
        Enum.map(&List.to_tuple/1)

defmodule SolutionPart1 do
    def traverse(route) do
        start = {0, 0}
        traverse(route, start, start, MapSet.new([start]))
    end

    defp traverse([], _, _, visited) do
        visited
    end
    defp traverse([{dir, steps}|route], {hx, hy}, tail, visited) do
        steps = List.to_integer(steps)
        {dx, dy} = case dir do
            'U' -> {0, -steps}
            'D' -> {0, +steps}
            'L' -> {-steps, 0}
            'R' -> {+steps, 0}
        end
        head = {hx + dx, hy + dy}

        {tail, visited} = follow(head, tail, visited)

        traverse(route, head, tail, visited)
    end

    defp follow({hx, hy}, {tx, ty}, visited) when abs(hx - tx) <= 1 and abs(hy - ty) <= 1 do
        {{tx, ty}, visited}
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx > tx and hy > ty do
        tail = {tx + 1, ty + 1}
        follow(head, tail, MapSet.put(visited, tail))
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx < tx and hy > ty do
        tail = {tx - 1, ty + 1}
        follow(head, tail, MapSet.put(visited, tail))
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx > tx and hy < ty do
        tail = {tx + 1, ty - 1}
        follow(head, tail, MapSet.put(visited, tail))
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx < tx and hy < ty do
        tail = {tx - 1, ty - 1}
        follow(head, tail, MapSet.put(visited, tail))
    end
    defp follow(head = {hx, _}, {tx, ty}, visited) when hx > tx do
        tail = {tx + 1, ty}
        follow(head, tail, MapSet.put(visited, tail))
    end
    defp follow(head = {hx, _}, {tx, ty}, visited) when hx < tx do
        tail = {tx - 1, ty}
        follow(head, tail, MapSet.put(visited, tail))
    end
    defp follow(head = {_, hy}, {tx, ty}, visited) when hy > ty do
        tail = {tx, ty + 1}
        follow(head, tail, MapSet.put(visited, tail))
    end
    defp follow(head = {_, hy}, {tx, ty}, visited) when hy < ty do
        tail = {tx, ty - 1}
        follow(head, tail, MapSet.put(visited, tail))
    end
end

IO.inspect(SolutionPart1.traverse(route) |> MapSet.size(), label: "Part1")

defmodule SolutionPart2 do
    def move({direction, distance}, {x, y}) do
        distance = List.to_integer(distance)
        {dx, dy} = case direction do
            'U' -> {0, -distance}
            'D' -> {0, +distance}
            'L' -> {-distance, 0}
            'R' -> {+distance, 0}
        end
        {x + dx, y + dy}
    end

    def follow(head, tail) do
        follow(head, tail, [])
    end

    defp follow({hx, hy}, {tx, ty}, visited) when abs(hx - tx) <= 1 and abs(hy - ty) <= 1 do
        {{tx, ty}, visited}
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx > tx and hy > ty do
        tail = {tx + 1, ty + 1}
        follow(head, tail, [tail|visited])
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx < tx and hy > ty do
        tail = {tx - 1, ty + 1}
        follow(head, tail, [tail|visited])
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx > tx and hy < ty do
        tail = {tx + 1, ty - 1}
        follow(head, tail, [tail|visited])
    end
    defp follow(head = {hx, hy}, {tx, ty}, visited) when hx < tx and hy < ty do
        tail = {tx - 1, ty - 1}
        follow(head, tail, [tail|visited])
    end
    defp follow(head = {hx, _}, {tx, ty}, visited) when hx > tx do
        tail = {tx + 1, ty}
        follow(head, tail, [tail|visited])
    end
    defp follow(head = {hx, _}, {tx, ty}, visited) when hx < tx do
        tail = {tx - 1, ty}
        follow(head, tail, [tail|visited])
    end
    defp follow(head = {_, hy}, {tx, ty}, visited) when hy > ty do
        tail = {tx, ty + 1}
        follow(head, tail, [tail|visited])
    end
    defp follow(head = {_, hy}, {tx, ty}, visited) when hy < ty do
        tail = {tx, ty - 1}
        follow(head, tail, [tail|visited])
    end
end

{path0, _} = Enum.map_reduce(route, {0, 0}, fn cmd, pos ->
    pos = SolutionPart2.move(cmd, pos)
    {pos, pos}
end)

path9 = Enum.reduce(1..9, path, fn _, path ->
    {_, new_path} = Enum.map_reduce(path, [{0, 0}], fn head, tail_path = [tail_pos|_] ->
        {tail, visited} = SolutionPart2.follow(head, tail_pos)
        {tail, visited ++ tail_path}
    end)
    Enum.reverse(new_path)
end)

IO.inspect(MapSet.size(MapSet.new(path9)), label: "Part2")
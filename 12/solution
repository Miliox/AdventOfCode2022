#! /usr/bin/env elixir
{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

grid = String.split(input_content, "\n") |> Enum.map(&String.to_charlist/1)

find_pos = fn e ->
    {Enum.find_index(Enum.map(Enum.zip(grid), &Tuple.to_list/1),
        fn col -> Enum.find_index(col, &(&1 == e)) end),
     Enum.find_index(grid,
        fn row -> Enum.find_index(row, &(&1 == e)) end)}
end

from = find_pos.(?S) |> IO.inspect()
to   = find_pos.(?E) |> IO.inspect()

grid = Enum.map(grid,
    fn row -> Enum.map(row,
        fn e ->
            case e do
                ?S -> ?a - ?a
                ?E -> ?z - ?a
                _  ->  e - ?a
            end
        end)
    end) |> Enum.map(&List.to_tuple/1) |> List.to_tuple()

y_len = tuple_size(grid)
x_len = tuple_size(elem(grid, 0))

:visited = :ets.new(:visited, [:set, :private, :named_table])
:ets.insert_new(:visited, {from, nil})

defmodule Solution do
    @grid  grid
    @from  from
    @to    to
    @x_len x_len
    @y_len y_len
    @table :visited

    def dijkstra([]) do
        :not_found
    end
    def dijkstra([@to|_]) do
        backtrace(@to, [])
    end
    def dijkstra([node|nodes]) do
        adjs = adjacents(node)
        dijkstra(nodes ++ adjs)
    end

    defp adjacents(node = {x, y}) do
        node_elev = elem(elem(@grid, y), x)

        adjs = [{x, y-1}, {x, y+1}, {x-1, y}, {x+1,y}]
        adjs = Enum.reject(adjs,
            fn {ax, ay} ->
                ax < 0 or ay < 0 or ax >= @x_len or ay >= @y_len
            end)
        adjs = Enum.reject(adjs,
            fn {ax, ay} ->
                adj_elev = elem(elem(@grid, ay), ax)

                # Jump from high elevantion is fine, even if could break someone's legs
                (adj_elev - node_elev) > 1
            end)
        adjs = Enum.reject(adjs, fn a -> :ets.member(@table, a) end)

        # visit
        Enum.map(adjs, fn a -> :ets.insert_new(@table, {a, node}) end)

        adjs
    end

    defp backtrace(node, path) do
        case :ets.lookup_element(@table, node, 2) do
           nil    -> path
           parent -> backtrace(parent, [parent|path])
        end
    end

    def find_bases(_, @y_len, result) do
        Enum.reverse(result)
    end
    def find_bases(@x_len, y, result) do
        find_bases(0, y+1, result)
    end
    def find_bases(x, y, result) do
        case elem(elem(@grid, y), x) do
            0 -> find_bases(x + 1, y, [{x,y}|result])
            _  -> find_bases(x + 1, y, result)
        end
    end
end

Solution.dijkstra([from]) |> length() |> IO.inspect(label: "Part1")

true = :ets.delete(:visited)

:visited = :ets.new(:visited, [:set, :private, :named_table])

bases = Solution.find_bases(0, 0, [])

:ets.insert_new(:visited, Enum.map(bases, fn node -> {node, nil} end))

Solution.dijkstra(bases) |> length() |> IO.inspect(label: "Part2")
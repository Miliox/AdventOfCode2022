#! /usr/bin/env elixir
{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

defmodule Solution do
    def parse(line) do
        line = String.to_charlist(line) ++ '.'
        {:ok, tokens, _}     = :erl_scan.string(line)
        {:ok, abstract_form} = :erl_parse.parse_exprs(tokens)
        {:value, value, _}   = :erl_eval.exprs(abstract_form, [])
        value
    end

    # Compare left and right sides
    # returns
    #   :eq - left side equals to right side
    #   :lt - left side lower than right side
    #   :gt - left side greater than right side
    def compare([], []), do: :eq
    def compare([], rl) when is_list(rl), do: :lt
    def compare(ll, []) when is_list(ll), do: :gt
    def compare([l|ltail], right = [r|_]) when is_integer(l) and is_list(r) do
        left = [[l]] ++ ltail
        compare(left, right)
    end
    def compare(left = [l|_], [r|rtail]) when is_list(l) and is_integer(r) do
        right = [[r]] ++ rtail
        compare(left, right)
    end
    def compare([l|ltail], [r|rtail]) when is_list(l) and is_list(r) do
        case compare(l, r) do
            :eq -> compare(ltail, rtail)
            :lt -> :lt
            :gt -> :gt
        end
    end
    def compare([l|ltail], [r|rtail]) when is_integer(l) and is_integer(r) do
        cond do
            l == r -> compare(ltail, rtail)
            l > r -> :gt
            l < r -> :lt
        end
    end
end

pairs  = String.split(input_content, "\n")
      |> Enum.reject(&(&1 == ""))
      |> Enum.map(&Solution.parse/1)

sorted_indexes = Enum.chunk_every(pairs, 2)
               |> Enum.map(fn [l,r] -> Solution.compare(l,r) end)
               |> Enum.with_index(fn e,i -> {1+i,e} end)
               |> Enum.filter(fn {_, cmp} -> cmp == :lt end)
               |> Enum.map(&(elem(&1, 0)))

IO.inspect(Enum.sum(sorted_indexes), label: "Part1", charlists: :as_list, limit: :infinity)

separators = [[[2]], [[6]]]

pairs = pairs ++ separators

sorted_pairs = Enum.sort(pairs, &(Solution.compare(&1, &2) == :lt))

separators_indexes = Enum.map(separators,
    fn sep -> Enum.find_index(sorted_pairs, &(&1 == sep)) + 1 end)

IO.inspect(Enum.product(separators_indexes), label: "Part2")
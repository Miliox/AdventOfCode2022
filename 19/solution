#! /usr/bin/env elixir
{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

defmodule Resources do
    def new(),                           do: new(0,0,0,0)
    def new(ore),                        do: new(ore, 0, 0, 0)
    def new(ore, clay),                  do: new(ore, clay, 0, 0)
    def new(ore, clay, obsidian),        do:  new(ore, clay, obsidian, 0)
    def new(ore, clay, obsidian, geode), do: [ore: ore, clay: clay, obsidian: obsidian, geode: geode]

    def add(res1, res2) do
        Enum.zip_with([res1, res2], fn [{kind, r1}, {kind, r2}] -> {kind, r1 + r2} end)
    end

    def sub(res1, res2) do
        Enum.zip_with([res1, res2], fn [{kind, r1}, {kind, r2}] -> {kind, r1 - r2} end)
    end

    def trunc_div(res1, res2) do
        Enum.min(Enum.zip_with([res1, res2], fn
            [{kind, r1}, {kind, 0}] -> :inf
            [{kind, r1}, {kind, r2}] -> div(r1, r2)
        end))
    end
end

defmodule Blueprint do
    def new([index, ore_robot_ore_cost, clay_robot_ore_cost, obsidian_robot_ore_cost, obsidian_robot_clay_cost, geode_robot_ore_cost, geode_robot_obsidian_cost]) do
        [
            blueprint: index, 
            ore_robot: Resources.new(ore_robot_ore_cost, 0, 0, 0),
            clay_robot: Resources.new(clay_robot_ore_cost, 0, 0, 0),
            obsidian_robot: Resources.new(obsidian_robot_ore_cost, obsidian_robot_clay_cost, 0, 0),
            geode_robot: Resources.new(geode_robot_ore_cost, 0, geode_robot_obsidian_cost, 0)
        ]
    end

    def afford?(blueprint, res) do
        [
            ore_robot: Resources.trunc_div(res, blueprint[:ore_robot]),
            clay_robot: Resources.trunc_div(res, blueprint[:clay_robot]),
            obsidian_robot: Resources.trunc_div(res, blueprint[:obsidian_robot]),
            geode_robot: Resources.trunc_div(res, blueprint[:geode_robot]),
        ]
    end
end

defmodule ArgParser do
    def parse(input) do
        {:ok, regex} = Regex.compile(
            "Blueprint (\\d+): Each ore robot costs (\\d+) ore\. " <>
            "Each clay robot costs (\\d+) ore\\. " <>
            "Each obsidian robot costs (\\d+) ore and (\\d+) clay. " <>
            "Each geode robot costs (\\d+) ore and (\\d+) obsidian\.")

        matches = Regex.scan(regex, input)

        Enum.map(matches, fn [_|groups] ->
            Blueprint.new(Enum.map(groups, &String.to_integer/1))
        end)
    end
end



defmodule Solution do
    def simulate([], results), do: prune(MapSet.to_list(MapSet.new(results)))
    def simulate([{n, blueprint, robots, total}|in_progress], results) do
        affordable_robots = Blueprint.afford?(blueprint, total)

        branches = Enum.filter([
           if affordable_robots[:geode_robot] > 0 do
                r = Resources.add(robots, Resources.new(0, 0, 0, 1))
                t = Resources.sub(total, blueprint[:geode_robot])
                t = Resources.add(t, robots)
                {n - 1, blueprint, r, t} 
            end,
            if affordable_robots[:obsidian_robot] > 0 do
                r = Resources.add(robots, Resources.new(0, 0, 1))
                t = Resources.sub(total, blueprint[:obsidian_robot])
                t = Resources.add(t, robots)
                {n - 1, blueprint, r, t}
            end,
            if affordable_robots[:clay_robot] > 0 do
                r = Resources.add(robots, Resources.new(0, 1))
                t = Resources.sub(total, blueprint[:clay_robot])
                t = Resources.add(t, robots)
                {n - 1, blueprint, r, t}
            end,
            if affordable_robots[:ore_robot] > 0 do
                r = Resources.add(robots, Resources.new(1))
                t = Resources.sub(total, blueprint[:ore_robot])
                t = Resources.add(t, robots)
                {n - 1, blueprint, r, t}
            end,
            {n - 1, blueprint, robots, Resources.add(total, robots)}
        ], fn e -> e != nil end)

        simulate(in_progress, branches ++ results)
    end

    def prune(branches) do
        maxs = Enum.reduce(branches, Resources.new(), fn {_, _, robots, total}, max_rs  ->
            Enum.zip_with([robots, max_rs],
                fn [{kind, r1}, {kind, r2}] -> {kind, max(r1, r2)} end)
        end) # |> IO.inspect()

        branches = Enum.filter(branches, fn {_, _, robots, total} ->
            robots[:geode] == maxs[:geode]
        end)

        # IO.inspect(length(branches))

        branches
    end

    def quality_level_proc(parent_pid, blueprint) do
        results = Enum.reduce(24..1, [{24, blueprint, Resources.new(1), Resources.new()}], fn num, states ->
            # IO.inspect({self(), num, length(states)}, label: "QProc")
            states = Solution.simulate(states, [])
        end)

        geode_max = Enum.reduce(results, 0, fn {_, _, _, total}, geode_max  ->
            max(geode_max, total[:geode])
        end)

        send(parent_pid, {:quality_level, self(), geode_max})
    end
end

blueprints = ArgParser.parse(input_content) |> IO.inspect()

procs = Enum.map(blueprints, fn bp -> spawn(Solution, :quality_level_proc, [self(), bp]) end)

quality_levels = Enum.map(procs,
    fn child ->
    receive do
        {:quality_level, ^child, quality_level} -> quality_level
    end
end) |> IO.inspect(limit: :infinity, charlists: :as_lists)

Enum.sum(Enum.with_index(quality_levels, fn item, index -> item * (index + 1) end)) |> IO.inspect(label: "Part1")

# results = Enum.reduce(24..1, [{24, Enum.fetch!(blueprints, 0), Resources.new(1), Resources.new()}], fn _, states ->
#     states = Solution.simulate(states, [])
# end) |> IO.inspect(limit: :infinity)


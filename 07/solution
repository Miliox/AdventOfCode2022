#! /usr/bin/env elixir

defmodule Solution do
    def traverse([], _, dirs) do
        # Do from leaves to root keep everything correct
        paths = Map.keys(dirs) |> Enum.sort(&(length(&1) >= length(&2)))

        # Add child directory size of parent directory
        Enum.reduce(paths, dirs,
            fn child = [_| parent], dirs ->
                {:ok, child_size}  = Map.fetch(dirs, child)
                case Map.fetch(dirs, parent) do
                    {:ok, parent_size} -> Map.put(dirs, parent, parent_size + child_size)
                    :error             -> dirs
                end
            end)
    end
    def traverse([[ "$", "cd", "/" ]|cmds], _, dirs) do
        traverse(cmds, ["/"], dirs)
    end
    def traverse([[ "$", "cd", ".."]|cmds], [_|path], dirs) do
        traverse(cmds, path, dirs)
    end
    def traverse([[ "$", "cd", dir]|cmds], path, dirs) do
        path = [dir|path]
        traverse(cmds, path, dirs)
    end
    def traverse([["$", "ls"]|cmds], path, dirs) do
        dirs = Map.put_new(dirs, path, 0)
        traverse(cmds, path, dirs)
    end
    def traverse([["dir", _]|cmds], path, dirs) do
        traverse(cmds, path, dirs)
    end
    def traverse([[file_size, _]| cmds], path, dirs) do
        file_size = String.to_integer(file_size)

        # update directory size
        {:ok, dir_size} = Map.fetch(dirs, path)
        dir_size = dir_size + file_size
        dirs = Map.put(dirs, path, dir_size)

        traverse(cmds, path, dirs)
    end
end

{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

commands = String.split(input_content, "\n")  |> Enum.map(&(String.split(&1, " ")))

directories = Solution.traverse(commands, [], %{})

# Sorted to make next operations easier
directory_sizes = Enum.sort(Map.values(directories))

# Find all of the directories with a total size of at most 100000.
# What is the sum of the total sizes of those directories?
part1 = Enum.reject(directory_sizes, &(&1 > 100000)) |> Enum.sum()

# Find the smallest directory that, if deleted, would free up enough
# space on the filesystem to run the update.
# What is the total size of that directory?
req_space = 30000000 - (70000000 - Enum.at(directory_sizes, -1))
part2 = Enum.find(directory_sizes, &(&1 >= req_space))

IO.inspect(part1, label: "Part1")
IO.inspect(part2, label: "Part2")

#! /usr/bin/env elixir

defmodule Solution do
    def traverse([], _, dirs) do
        paths = Map.keys(dirs) |> Enum.sort(&(length(&1) >= length(&2)))
        Enum.reduce(paths, dirs,
        fn child = [_| parent], dirs ->
            {:ok, child_size}  = Map.fetch(dirs, child)
            case Map.fetch(dirs, parent) do
                {:ok, parent_size} -> Map.put(dirs, parent, parent_size + child_size)
                :error             -> dirs
            end
        end)
    end
    def traverse([[ "$", "cd", "/" ]|cmds], _, dirs) do
        traverse(cmds, ["/"], dirs)
    end
    def traverse([[ "$", "cd", ".."]|cmds], [_|path], dirs) do
        traverse(cmds, path, dirs)
    end
    def traverse([[ "$", "cd", dir]|cmds], path, dirs) do
        path = [dir|path]
        traverse(cmds, path, dirs)
    end
    def traverse([["$", "ls"]|cmds], path, dirs) do
        dirs = Map.put_new(dirs, path, 0)
        traverse(cmds, path, dirs)
    end
    def traverse([["dir", _dir_name]|cmds], path, dirs) do
        traverse(cmds, path, dirs)
    end
    def traverse([[file_size, _file_name]| cmds], path, dirs) do
        file_size = String.to_integer(file_size)
        {:ok, dir_size} = Map.fetch(dirs, path)
        dir_size = dir_size + file_size
        dirs = Map.put(dirs, path, dir_size)
        traverse(cmds, path, dirs)
    end
end

{:ok, input_content} = System.argv() |> Enum.at(0) |> File.read()

input_content =  input_content |>
                 String.split("\n")  |>
                 Enum.map(fn line -> String.split(line, " ") end)

directories = Solution.traverse(input_content, [], %{})

directory_sizes = Map.values(directories) |> Enum.sort() |> Enum.reverse()

directory_sizes_below_limit = Enum.reject(directory_sizes, &(&1 > 100000))

IO.inspect(input_content, label: "Input")
IO.inspect(directories, label: "directories")

# What is the sum of the total sizes of those directories?
IO.inspect(Enum.sum(directory_sizes_below_limit), label: "directories")
